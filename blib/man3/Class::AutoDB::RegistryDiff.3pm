.\" Automatically generated by Pod::Man v1.37, Pod::Parser v1.14
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  | will give a
.\" real vertical bar.  \*(C+ will give a nicer C++.  Capital omega is used to
.\" do unbreakable dashes and therefore won't be available.  \*(C` and \*(C'
.\" expand to `' in nroff, nothing in troff, for use with C<>.
.tr \(*W-|\(bv\*(Tr
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.hy 0
.if n .na
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Class::AutoDB::RegistryDiff 3"
.TH Class::AutoDB::RegistryDiff 3 "2006-04-06" "perl v5.8.5" "User Contributed Perl Documentation"
.SH "NAME"
Class::AutoDB::RegistryDiff \- Compare two registries and maintain differences
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Used by Class::AutoDB::Registry to process differences between
in-memory and saved registries.
.PP
.Vb 11
\&  use Class::AutoDB::RegistryDiff;
\&  use Class::AutoDB::Registry;
\&  my $diff=new Class::AutoDB::RegistryDiff(-baseline=>$saved,-change=>$in_memory)
\&  if ($diff->is_sub) {                     # is new registry subset of saved one?
\&    $registry=$saved_registry;             # then used saved one
\&  } elsif  ($diff->is_different) {
\&    # get changes -- new collections and collections with new columns
\&    my @new_collections=$diff->new_collections;
\&    my @expanded_collections=$diff->expanded_collections;
\&    # process changes
\&  }
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This class compares two registries and records their differences.  The
first registry is considered the baseline, and differences are
reported relative to it.
.Sh "Constructors"
.IX Subsection "Constructors"
.Vb 6
\& Title   : new
\& Usage   : $diff=new Class::AutoDB::RegistryDiff(-baseline=>$saved,-other=>$in_memory)
\& Function: Compare registries and remember differences
\& Returns : Object recording differences
\& Args    : -baseline    baseline registry
\&           -other       new registry being compared to baseline
.Ve
.Sh "Methods to get Collections"
.IX Subsection "Methods to get Collections"
.Vb 5
\& Title   : new_collections
\& Usage   : $collections=$diff->new_collections;
\& Function: Return collections present in new registry, but not baseline
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::Collection objects
.Ve
.PP
.Vb 5
\& Title   : expanded_collections
\& Usage   : $collections=$diff->expanded_collections;
\& Function: Return collections that have additional search keys in new registry 
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::Collection objects
.Ve
.PP
.Vb 5
\& Title   : baseline_only_collections
\& Usage   : $collections=$diff->baseline_only_collections
\& Function: Return collections present in basline registry, but not new one
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::Collection objects
.Ve
.PP
.Vb 5
\& Title   : equivalent_collections
\& Usage   : $collections=$diff->equivalent_collections
\& Function: Return collections present in both registries and unchanged in new one
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::Collection objects
.Ve
.PP
.Vb 6
\& Title   : sub_collections
\& Usage   : $collections=$diff->sub_collections
\& Function: Return collections that are present in both collections and are subcollections
\&           in new one relative to baseline
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::Collection objects
.Ve
.PP
.Vb 6
\& Title   : super_collections
\& Usage   : $collections=$diff->super_collections
\& Function: Return collections that are present in both collections and are supercollections
\&           in new one relative to baseline
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::Collection objects
.Ve
.PP
.Vb 5
\& Title   : insconsistent_collections
\& Usage   : $collections=$diff->insconsistent_collections
\& Function: Return collections that are present in both collections but  are insconsistent
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::Collection objects
.Ve
.Sh "Methods to get CollectionDiffs"
.IX Subsection "Methods to get CollectionDiffs"
.Vb 6
\& Title   : expanded_diffs
\& Usage   : $diffs=$diff->expanded_diffs;
\& Function: Return diffs for collections that have additional search keys in 
\&           new registry 
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::CollectionDiff objects
.Ve
.PP
.Vb 6
\& Title   : equivalent_diffs
\& Usage   : $diffs=$diff->equivalent_diffs
\& Function: Return diffs for collections present in both registries and unchanged 
\&           in new one
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::CollectionDiff objects
.Ve
.PP
.Vb 6
\& Title   : sub_diffs
\& Usage   : $diffs=$diff->sub_diffs
\& Function: Return diffs for collections that are present in both diffs and 
\&           are subcollections in new one relative to baseline
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::CollectionDiff objects
.Ve
.PP
.Vb 6
\& Title   : super_diffs
\& Usage   : $diffs=$diff->super_diffs
\& Function: Return diffs for collections that are present in both diffs and 
\&           are supercollections in new one relative to baseline
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::CollectionDiff objects
.Ve
.PP
.Vb 6
\& Title   : insconsistent_diffs
\& Usage   : $diffs=$diff->insconsistent_diffs
\& Function: Return diffs for collections that are present in both diffs but 
\&           are insconsistent
\& Args    : None
\& Returns : ARRAY ref of Class::AutoDB::CollectionDiff objects
.Ve
.Sh "Boolean test methods"
.IX Subsection "Boolean test methods"
.Vb 5
\& Title   : is_consistent
\& Usage   : $bool=$diff->is_consistent
\& Function: Check if registries are consistent
\& Args    : None
\& Returns : true/false values
.Ve
.PP
.Vb 5
\& Title   : is_inconsistent
\& Usage   : $bool=$diff->is_inconsistent
\& Function: Check if registries are inconsistent
\& Args    : registry being compared with this one
\&s Returns : true/false values
.Ve
.PP
.Vb 5
\& Title   : is_equivalent
\& Usage   : $bool=$diff->is_equivalent
\& Function: Check if registries are equivalent.
\& Args    : None
\& Returns : true/false values
.Ve
.PP
.Vb 5
\& Title   : is_different
\& Usage   : $bool=$diff->is_different
\& Function: Checkif registries are not equivalent.
\& Args    : None
\& Returns : true/false values
.Ve
.PP
.Vb 6
\& Title   : is_sub
\& Usage   : $bool=$registry->is_sub
\& Function: Check if new registry is subset of baseline.  Note: equivalent is 
\&           considered subset.
\& Args    : None
\& Returns : true/false values
.Ve
.PP
.Vb 6
\& Title   : is_super
\& Usage   : $bool=$diff->is_super
\& Function: Check if new registry is superset of baseline. Note: equivalent is 
\&           considered subset.
\& Args    : None
\& Returns : true/false values
.Ve
.PP
.Vb 5
\& Title   : has_new
\& Usage   : $bool=$registry->has_new
\& Function: Check if new registry contains new collections
\& Args    : None
\& Returns : true/false values
.Ve
.PP
.Vb 5
\& Title   : has_expanded
\& Usage   : $bool=$registry->has_expanded
\& Function: Check if new registry contains expanded collections
\& Args    : None
\& Returns : true/false values
.Ve
.Sh "Comparison methods"
.IX Subsection "Comparison methods"
\&\s-1NG\s0 04\-12\-10: copied this section from Registry.pod so it wouldn't get lost.  Is it real??
.PP
These methods compare two registries and report on differences.  Since
the underlying comparison process is relatively slow, comparison
results are cached within the registry.  This shoudld be trasparent in
normal use, but you must call cmp_reset if you wish to force a
comparison to be redone, eg if you change the 'other_registry'.
.PP
.Vb 7
\& Title   : cmp_reset
\& Usage   : $registry->cmp_status
\&           -- OR --
\&           $registry->cmp_status($other_registry)
\& Function: Reset comparison cache for one or all other registries
\& Args    : registry being compared with this one (optional)
\& Returns : true/false values
.Ve
.PP
.Vb 7
\& Title   : self_only_collections
\& Usage   : @collections=$registry->self_only_collections($other_registry);
\&          -- OR --
\&           $collections=$$registry->self_only_collections($other_registry);
\& Function: Return collections present in this registry but not other
\& Args    : registry being compared with this one
\& Returns : array or ARRAY ref of Class::AutoDB::Collection objects
.Ve
.PP
.Vb 7
\& Title   : other_only_collections
\& Usage   : @collections=$registry->other_only_collections($other_registry);
\&          -- OR --
\&           $collections=$$registry->other_only_collections($other_registry);
\& Function: Return collections present in other registry but not this one
\& Args    : registry being compared with this one
\& Returns : array or ARRAY ref of Class::AutoDB::Collection objects
.Ve
.PP
.Vb 8
\& Title   : expanded_collections
\& Usage   : @collections=$registry->expanded_collections($other_registry);
\&          -- OR --
\&           $collections=$$registry->expanded_collections($other_registry);
\& Function: Return collections that have additional search keys in this registry 
\&           than the other.
\& Args    : registry being compared with this one
\& Returns : array or ARRAY ref of Class::AutoDB::Collection objects
.Ve
.PP
.Vb 8
\& Title   : shrunk_collections
\& Usage   : @collections=$registry->shrunk_collections($other_registry);
\&          -- OR --
\&           $collections=$$registry->shrunk_collections($other_registry);
\& Function: Return collections that are missing search keys in this registry 
\&           compared to the other.
\& Args    : registry being compared with this one
\& Returns : array or ARRAY ref of Class::AutoDB::Collection objects
.Ve
.PP
.Vb 5
\& Title   : is_consistent
\& Usage   : $status=$registry->is_inconsistent($other_registry)
\& Function: Check if registries are consistent
\& Args    : registry being compared with this one
\& Returns : true/false values
.Ve
.PP
.Vb 5
\& Title   : is_inconsistent
\& Usage   : $status=$registry->is_inconsistent($other_registry)
\& Function: Check if registries are inconsistent
\& Args    : registry being compared with this one
\& Returns : true/false values
.Ve
.PP
.Vb 5
\& Title   : is_equivalent
\& Usage   : $status=$registry->is_equivalent($other_registry)
\& Function: Check if registries are equivalent.
\& Args    : registry being compared with this one
\& Returns : true/false values
.Ve
.PP
.Vb 5
\& Title   : is_different
\& Usage   : $status=$registry->is_different($other_registry)
\& Function: Checkif registries are not equivalent.
\& Args    : registry being compared with this one
\& Returns : true/false values
.Ve
.PP
.Vb 6
\& Title   : is_sub
\& Usage   : $status=$registry->is_sub($other_registry)
\& Function: Check if this registry is subset of other.  Note: equivalent is 
\&           considered subset.
\& Args    : registry being compared with this one
\& Returns : true/false values
.Ve
.PP
.Vb 6
\& Title   : is_super
\& Usage   : $status=$registry->is_super($other_registry)
\& Function: Check if this registry is superset of other. Note: equivalent is 
\&           considered subset.
\& Args    : registry being compared with this one
\& Returns : true/false values
.Ve
.PP
# Title   : is_expanded
# Usage   : \f(CW$status\fR=$registry\->is_expanded($other_registry)
# Function: Check if this registry contains collections that are expanded
#           relative to the other. 
# Args    : registry being compared with this one
# Returns : true/false values
.PP
# Title   : is_shrunk
# Usage   : \f(CW$status\fR=$registry\->is_shrunk($other_registry)
# Function: Check if this registry contains collections that are shrunk
#           relative to the other. 
# Args    : registry being compared with this one
# Returns : true/false values
